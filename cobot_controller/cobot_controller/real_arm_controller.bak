#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from trajectory_msgs.msg import JointTrajectory
from control_msgs.action import FollowJointTrajectory
from rclpy.action import ActionServer
from rclpy.action.server import ServerGoalHandle
from cri_lib import CRIController
from math import degrees

class RealArmController(Node):
    def __init__(self):
        super().__init__('real_arm_controller')

        # Kh·ªüi t·∫°o controller
        self.controller = CRIController()
        host = '192.168.3.11'
        port = 3920    
        self.controller.connect(host=host, port=port)
        self.controller.set_active_control(True)
        self.controller.enable()

        self.get_logger().info("‚úÖ CRIController connected and motors enabled.")

        # Kh·ªüi t·∫°o action server
        self._action_server = ActionServer(
            self,
            FollowJointTrajectory,
            '/arm_controller/follow_joint_trajectory',
            self.execute_callback
        )

        self.get_logger().info("‚úÖ Real Arm Controller (action server) is ready.")

    async def execute_callback(self, goal_handle: ServerGoalHandle):
        self.get_logger().info("üì• Received trajectory goal")
        trajectory: JointTrajectory = goal_handle.request.trajectory

        # Duy·ªát t·ª´ng ƒëi·ªÉm v√† g·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn
        for i, point in enumerate(trajectory.points):
            positions = point.positions
            if len(positions) < 5:
                self.get_logger().warn(f"‚ùó Trajectory point {i} does not have enough joint values.")
                continue

            # Convert radian ‚Üí degree
            joint_angles_deg = [degrees(pos) for pos in positions[:5]]
            j1, j2, j3, j4, j5 = joint_angles_deg

            # G·ª≠i l·ªánh ƒëi·ªÅu khi·ªÉn th·ª±c t·∫ø
            self.controller.move_joints(
                j1, j2, j3, j4, j5,
                0.0, 0.0, 0.0, 0.0, 30.0,
                wait_move_finished=True,
                move_finished_timeout=10000
            )
            self.get_logger().info(f"üöÄ Sent joints: {[round(j, 2) for j in joint_angles_deg]}")

        # B√°o ho√†n th√†nh
        goal_handle.succeed()
        result = FollowJointTrajectory.Result()
        return result

    def destroy_node(self):
        self.controller.disable()
        self.controller.close()
        self.get_logger().info("üõë CRIController disconnected and motors disabled.")
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    node = RealArmController()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
