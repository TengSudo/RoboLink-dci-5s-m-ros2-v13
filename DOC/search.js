window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "cri_lib", "modulename": "cri_lib", "kind": "module", "doc": "<h1 id=\"introduction\">Introduction</h1>\n\n<p>Python package to interface an igus Robot Control via the CRI protocol.</p>\n\n<h1 id=\"current-features\">Current Features</h1>\n\n<ul>\n<li>Robot State</li>\n<li>Basic functions\n<ul>\n<li>Reset</li>\n<li>Enable / Disable</li>\n<li>Acquisition of active control</li>\n<li>Override</li>\n</ul></li>\n<li>Referencing of \n<ul>\n<li>single axis</li>\n<li>all axes</li>\n<li>Set joints to zero</li>\n</ul></li>\n<li>Direct movements\n<ul>\n<li>Joint and relative joint</li>\n<li>Cartesian</li>\n<li>Cartesian base and tool relative</li>\n</ul></li>\n<li>Live jog</li>\n<li>Digital IO and global signals</li>\n<li>Programs\n<ul>\n<li>Upload</li>\n<li>Start / Pause / Stop</li>\n</ul></li>\n<li>CAN Bridge</li>\n</ul>\n\n<h1 id=\"getting-started\">Getting Started</h1>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>Using the library requires no additional libraries, only testing has external dependencies.</p>\n\n<p>In the top directory of this repository execute <code>pip install .</code></p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The library provides the <code>CRIController</code> class which is the main interface to controll the iRC. It handles the network connection and starts background threads for keep alive messages and processing of received messages. Movement functions directly return even though the move might not be finisched. If you want to wait for the move to finish, set the <code>wait_move_finished</code> parameter to <code>True</code>.\nMost function return a bool to check whether the execution was successful.</p>\n\n<h3 id=\"typical-procedure\">Typical procedure</h3>\n\n<ol>\n<li>Connect to iRC: <code>CRIController.connect(...)</code> Default IP is <code>192.168.3.11</code> with port <code>3920</code>. For using the simulation in the iRC desktop software, connect to <code>127.0.0.1</code>, most of the time the port in the simulation is <code>3921</code>, but can be different. Have a look at the log if you are unable to connect. Check whether connection was successfull via the returned bool.</li>\n<li>If you want to control the robot, acquire active control via <code>CRIController.set_active_control(True)</code>.</li>\n<li>Enable drives with <code>CRIController.enable()</code></li>\n<li>Wait unitl axes are ready <code>CRIcontroller.wait_for_kinematics_ready()</code></li>\n<li>Do some work with your robot, see API documentation for all functionality.</li>\n<li>Diable drives with <code>CRIController.disable()</code></li>\n<li>Close connection with <code>CRIController.close()</code></li>\n</ol>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>See <code>examples</code> directory.</p>\n\n<h1 id=\"tests\">Tests</h1>\n\n<p>This repository provides pytests for the message parser. They require <code>pytest</code> and <code>pytest-cov</code>, which can be installed via <code>pip install -r requirements.txt</code>. To run the tests (including coverage) execute the following command: <code>pytest -vv --cov=cri_lib --cov-report term-missing tests</code>. </p>\n"}, {"fullname": "cri_lib.cri_controller", "modulename": "cri_lib.cri_controller", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController", "modulename": "cri_lib.cri_controller", "qualname": "CRIController", "kind": "class", "doc": "<p>Class implementing the CRI network protocol for igus Robot Control.</p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.ALIVE_JOG_INTERVAL_SEC", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.ALIVE_JOG_INTERVAL_SEC", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.2"}, {"fullname": "cri_lib.cri_controller.CRIController.ACTIVE_JOG_INTERVAL_SEC", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.ACTIVE_JOG_INTERVAL_SEC", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.02"}, {"fullname": "cri_lib.cri_controller.CRIController.RECEIVE_TIMEOUT_SEC", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.RECEIVE_TIMEOUT_SEC", "kind": "variable", "doc": "<p></p>\n", "default_value": "5"}, {"fullname": "cri_lib.cri_controller.CRIController.DEFAULT_ANSWER_TIMEOUT", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.DEFAULT_ANSWER_TIMEOUT", "kind": "variable", "doc": "<p></p>\n", "default_value": "10.0"}, {"fullname": "cri_lib.cri_controller.CRIController.MotionType", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.MotionType", "kind": "class", "doc": "<p>Robot Motion Type for Jogging</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.cri_controller.CRIController.MotionType.Joint", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.MotionType.Joint", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionType.Joint: &#x27;Joint&#x27;&gt;"}, {"fullname": "cri_lib.cri_controller.CRIController.MotionType.CartBase", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.MotionType.CartBase", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionType.CartBase: &#x27;CartBase&#x27;&gt;"}, {"fullname": "cri_lib.cri_controller.CRIController.MotionType.CartTool", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.MotionType.CartTool", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionType.CartTool: &#x27;CartTool&#x27;&gt;"}, {"fullname": "cri_lib.cri_controller.CRIController.MotionType.Platform", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.MotionType.Platform", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MotionType.Platform: &#x27;Platform&#x27;&gt;"}, {"fullname": "cri_lib.cri_controller.CRIController.robot_state", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.robot_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.RobotState"}, {"fullname": "cri_lib.cri_controller.CRIController.robot_state_lock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.robot_state_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.parser", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.parser", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.connected", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.connected", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.sock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.sock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.socket_write_lock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.socket_write_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.can_mode", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.can_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cri_lib.cri_controller.CRIController.can_queue", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.can_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": queue.Queue"}, {"fullname": "cri_lib.cri_controller.CRIController.jog_thread", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.jog_thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.receive_thread", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.receive_thread", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.sent_command_counter_lock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.sent_command_counter_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.sent_command_counter", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.sent_command_counter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.answer_events_lock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.answer_events_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.answer_events", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.answer_events", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, threading.Event]"}, {"fullname": "cri_lib.cri_controller.CRIController.error_messages", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.error_messages", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, str]"}, {"fullname": "cri_lib.cri_controller.CRIController.status_callback", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.status_callback", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.live_jog_active", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.live_jog_active", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "cri_lib.cri_controller.CRIController.jog_intervall", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.jog_intervall", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.jog_speeds", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.jog_speeds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, float]"}, {"fullname": "cri_lib.cri_controller.CRIController.jog_speeds_lock", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.jog_speeds_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_controller.CRIController.connect", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.connect", "kind": "function", "doc": "<p>Connect to iRC.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>host : str\n    IP address or hostname of iRC\nport : int\n    port of iRC</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    True if connected\n    False if not connected</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3920</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.close", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.close", "kind": "function", "doc": "<p>Close network connection. Might block for a while waiting for the threads to finish.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.wait_for_status_update", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.wait_for_status_update", "kind": "function", "doc": "<p>Wait for next STATUS message.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>timeout : float | None\n    Maximum wait time, infinite if <code>None</code></p>\n\n<h2 id=\"raises\">Raises</h2>\n\n<p>CRITimeoutError\n    raised if no status update was received in given timeout</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.register_status_callback", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.register_status_callback", "kind": "function", "doc": "<p>Register a callback which is called every time a STATUS message was parsed to the state.\nThe callback must have the following definition:\ndef callback(state: RobotState)\nKeep the callback as fast as possible as it will be excute by the receive thread and no messages will be processed, while is runs.\nAlso keep thread safety in mind, as the callback will be excuted by the receive thread.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>callback : Callable\n    callback function to be called, pass <code>None</code> to deregister a callback</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.reset", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.reset", "kind": "function", "doc": "<p>Reset robot</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool:\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.enable", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.enable", "kind": "function", "doc": "<p>Enable robot\n   An potential error message received from the robot will be logged with priority DEBUG</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.disable", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.disable", "kind": "function", "doc": "<p>Disable robot</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_active_control", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_active_control", "kind": "function", "doc": "<p>Acquire or return active control of robot</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>active : bool\n    <code>True</code> acquire active control\n    <code>False</code> return active control</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.zero_all_joints", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.zero_all_joints", "kind": "function", "doc": "<p>Set all joints to zero</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.reference_all_joints", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.reference_all_joints", "kind": "function", "doc": "<p>Reference all joints. Long timout of 30 seconds.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.reference_single_joint", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.reference_single_joint", "kind": "function", "doc": "<p>Reference a single joint. Long timout of 30 seconds.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>joint : str\n    joint name with either 'A', 'E', 'T' or 'P' as first character and an corresponding index as second</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">joint</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.get_referencing_info", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.get_referencing_info", "kind": "function", "doc": "<p>Reference all joints. Long timout of 30 seconds.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.wait_for_kinematics_ready", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.wait_for_kinematics_ready", "kind": "function", "doc": "<p>Wait until drive state is indicated as ready.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>timeout : float\n    maximum time to wait in seconds</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code>if drives are ready, <code>False</code> if not ready or timeout</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.move_joints", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.move_joints", "kind": "function", "doc": "<p>Absolute joint move</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>A1-A6, E1-E3 : float\n    Target angles of axes</p>\n\n<p>velocity : float\n    Velocity in percent of maximum velocity, range 1.0-100.0</p>\n\n<p>wait_move_finished : bool\n    true: wait until movement is finished\n    false: only wait for command ack and not until move is finished</p>\n\n<p>move_finished_timeout : float\n    timout in seconds for waiting for the move to finish, <code>None</code> will wait indefinetly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">velocity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">wait_move_finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move_finished_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.move_joints_relative", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.move_joints_relative", "kind": "function", "doc": "<p>Relative joint move</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>A1-A6, E1-E3 : float\n    Target angles of axes</p>\n\n<p>velocity : float\n    Velocity in percent of maximum velocity, range 1.0-100.0</p>\n\n<p>wait_move_finished : bool\n    true: wait until movement is finished\n    false: only wait for command ack and not until move is finished</p>\n\n<p>move_finished_timeout : float\n    timout in seconds for waiting for the move to finish, <code>None</code> will wait indefinetly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">velocity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">wait_move_finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move_finished_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.move_cartesian", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.move_cartesian", "kind": "function", "doc": "<p>Cartesian move</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X,Y,Z,A,B,C,E1-E3 : float\n    Target angles of axes</p>\n\n<p>velocity : float\n    Velocity in mm/s</p>\n\n<p>frame : str\n    frame of the coordinates, default is <code>#base</code></p>\n\n<p>wait_move_finished : bool\n    true: wait until movement is finished\n    false: only wait for command ack and not until move is finished</p>\n\n<p>move_finished_timeout : float\n    timout in seconds for waiting for the move to finish, <code>None</code> will wait indefinetly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">velocity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">frame</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;#base&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">wait_move_finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move_finished_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.move_base_relative", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.move_base_relative", "kind": "function", "doc": "<p>Relative cartesian move in base coordinate system</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X,Y,Z,A,B,C,E1-E3 : float\n    Target angles of axes</p>\n\n<p>velocity : float\n    Velocity in mm/s</p>\n\n<p>frame : str\n    frame of the coordinates, default is <code>#base</code></p>\n\n<p>wait_move_finished : bool\n    true: wait until movement is finished\n    false: only wait for command ack and not until move is finished</p>\n\n<p>move_finished_timeout : float\n    timout in seconds for waiting for the move to finish, <code>None</code> will wait indefinetly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">velocity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">wait_move_finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move_finished_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.move_tool_relative", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.move_tool_relative", "kind": "function", "doc": "<p>Relative cartesian move in tool coordinate system</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X,Y,Z,A,B,C,E1-E3 : float\n    Target angles of axes</p>\n\n<p>velocity : float\n    Velocity in mm/s</p>\n\n<p>frame : str\n    frame of the coordinates, default is <code>#base</code></p>\n\n<p>wait_move_finished : bool\n    true: wait until movement is finished\n    false: only wait for command ack and not until move is finished</p>\n\n<p>move_finished_timeout : float\n    timout in seconds for waiting for the move to finish, <code>None</code> will wait indefinetly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">velocity</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">wait_move_finished</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">move_finished_timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"mf\">300.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.stop_move", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.stop_move", "kind": "function", "doc": "<p>Stop movement</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.start_jog", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.start_jog", "kind": "function", "doc": "<p>starts live jog. Set speeds via set_jog_values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.stop_jog", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.stop_jog", "kind": "function", "doc": "<p>stops live jog.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_jog_values", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_jog_values", "kind": "function", "doc": "<p>Sets live jog axes speeds.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<pre><code>A1-A6, E1-3 : float\n    axes speeds in percent of maximum speed\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_motion_type", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_motion_type", "kind": "function", "doc": "<p>Set motion type</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>motion_type : MotionType\n    motion type</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">motion_type</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">cri_controller</span><span class=\"o\">.</span><span class=\"n\">CRIController</span><span class=\"o\">.</span><span class=\"n\">MotionType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_override", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_override", "kind": "function", "doc": "<p>Set override</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>override : float\n    override percent</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">override</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_dout", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_dout", "kind": "function", "doc": "<p>Set digital out</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>id : int\n    index of DOUT (0 to 63)</p>\n\n<p>value : bool\n    value to set DOUT to</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_din", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_din", "kind": "function", "doc": "<p>Set digital inout, only available in simulation</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>id : int\n    index of DIN (0 to 63)</p>\n\n<p>value : bool\n    value to set DIN to</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.set_global_signal", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.set_global_signal", "kind": "function", "doc": "<p>Set global signal</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>id : int\n    index of signal (0 to 99)</p>\n\n<p>value : bool\n    value to set signal to</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.load_programm", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.load_programm", "kind": "function", "doc": "<p>Load a program file from disk into the robot controller</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>program_name : str\n    the name in the directory /Data/Programs/, e.g. \u201ctest.xml\u201d</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">program_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.load_logic_programm", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.load_logic_programm", "kind": "function", "doc": "<p>Load a logic program file from disk into the robot controller</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>program_name : str\n    the name in the directory /Data/Programs/, e.g. \u201ctest.xml\u201d</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">program_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.start_programm", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.start_programm", "kind": "function", "doc": "<p>Start currently loaded Program</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.stop_programm", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.stop_programm", "kind": "function", "doc": "<p>Stop currently running Program</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.pause_programm", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.pause_programm", "kind": "function", "doc": "<p>Pause currently running Program</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> if request was successful\n    <code>False</code> if request was not successful</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.upload_file", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.upload_file", "kind": "function", "doc": "<p>Uploads file to iRC into <code>/Data/&lt;target_directory&gt;</code></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>path : str | Path\n    Path to file which should be uploaded</p>\n\n<p>target_directory : str\n    directory on iRC <code>/Data/&lt;target_directory&gt;</code> into which file will be uploaded, e.g. <code>Programs</code> for normal robot programs</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>bool\n    <code>True</code> file was uploaded successfully\n    <code>False</code> there was an error during upload</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">target_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.enable_can_bridge", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.enable_can_bridge", "kind": "function", "doc": "<p>Enables or diables CAN bridge mode. All other functions are disabled in CAN bridge mode.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>enabled : bool\n    <code>True</code> bridge mode enabled\n    <code>False</code> bridge mode disabled</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.can_send", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.can_send", "kind": "function", "doc": "<p>Send CAN message in CAN bridge mode.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>msg_id : int\n    message id of can message\nlength : int\n    length of data to send. Actual length used of the 8 data bytes\ndata : bytearray\n    data for CAN message always 8 bytes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">bytearray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.can_receive", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.can_receive", "kind": "function", "doc": "<p>Receive CAN message in CAN bridge mode from the recveive queue.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tuple[int, int, bytearray] | None\n    Returns a tuple of (msg_id, length, data) if a message was received or None if nothing was received within the timeout.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.get_board_temperatures", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.get_board_temperatures", "kind": "function", "doc": "<p>Receive motor controller PCB temperatures and save in robot state</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>blocking: bool\n    wait for response, always returns True if not waiting</p>\n\n<p>timeout: float | None\n    timeout for waiting in seconds or None for infinite waiting</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_controller.CRIController.get_motor_temperatures", "modulename": "cri_lib.cri_controller", "qualname": "CRIController.get_motor_temperatures", "kind": "function", "doc": "<p>Receive motor temperatures and save in robot state</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>blocking: bool\n    wait for response, always returns True if not waiting</p>\n\n<p>timeout: float | None\n    timeout for waiting in seconds or None for infinite waiting</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">blocking</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.cri_errors", "modulename": "cri_lib.cri_errors", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_errors.CRIError", "modulename": "cri_lib.cri_errors", "qualname": "CRIError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "cri_lib.cri_errors.CRIConnectionError", "modulename": "cri_lib.cri_errors", "qualname": "CRIConnectionError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "CRIError"}, {"fullname": "cri_lib.cri_errors.CRIConnectionError.__init__", "modulename": "cri_lib.cri_errors", "qualname": "CRIConnectionError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">&#39;Not connected to iRC or connection lost.&#39;</span></span>)</span>"}, {"fullname": "cri_lib.cri_errors.CRIConnectionError.message", "modulename": "cri_lib.cri_errors", "qualname": "CRIConnectionError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_errors.CRICommandTimeOutError", "modulename": "cri_lib.cri_errors", "qualname": "CRICommandTimeOutError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "CRIError"}, {"fullname": "cri_lib.cri_errors.CRICommandTimeOutError.__init__", "modulename": "cri_lib.cri_errors", "qualname": "CRICommandTimeOutError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">&#39;Time out waiting for command response.&#39;</span></span>)</span>"}, {"fullname": "cri_lib.cri_errors.CRICommandTimeOutError.message", "modulename": "cri_lib.cri_errors", "qualname": "CRICommandTimeOutError.message", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_protocol_parser", "modulename": "cri_lib.cri_protocol_parser", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_protocol_parser.CRIProtocolParser", "modulename": "cri_lib.cri_protocol_parser", "qualname": "CRIProtocolParser", "kind": "class", "doc": "<p>Class handling the parsing of CRI messages to the robot state.</p>\n"}, {"fullname": "cri_lib.cri_protocol_parser.CRIProtocolParser.__init__", "modulename": "cri_lib.cri_protocol_parser", "qualname": "CRIProtocolParser.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">robot_state</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RobotState</span>,</span><span class=\"param\">\t<span class=\"n\">robot_state_lock</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">allocate_lock</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "cri_lib.cri_protocol_parser.CRIProtocolParser.robot_state", "modulename": "cri_lib.cri_protocol_parser", "qualname": "CRIProtocolParser.robot_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_protocol_parser.CRIProtocolParser.robot_state_lock", "modulename": "cri_lib.cri_protocol_parser", "qualname": "CRIProtocolParser.robot_state_lock", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "cri_lib.cri_protocol_parser.CRIProtocolParser.parse_message", "modulename": "cri_lib.cri_protocol_parser", "qualname": "CRIProtocolParser.parse_message", "kind": "function", "doc": "<p>Parses a message to the RobotState of the class.</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>message: str\n    Message to be parsed including <code>CRISTART</code> and <code>CRIEND</code></p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>None | dict[str, str]\n    None if no Notification in necessary or\n    a dict indicating which answer event to notify (key: \"answer\") and optionally an error message (key: \"error\")</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "cri_lib.robot_state", "modulename": "cri_lib.robot_state", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "cri_lib.robot_state.RobotMode", "modulename": "cri_lib.robot_state", "qualname": "RobotMode", "kind": "class", "doc": "<p>Enum of possible robot modes for jogging, <code>FSM</code> does not support jogging.</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.RobotMode.JOINT", "modulename": "cri_lib.robot_state", "qualname": "RobotMode.JOINT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RobotMode.JOINT: &#x27;joint&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.RobotMode.CARTBASE", "modulename": "cri_lib.robot_state", "qualname": "RobotMode.CARTBASE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RobotMode.CARTBASE: &#x27;cartbase&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.RobotMode.CARTTOOL", "modulename": "cri_lib.robot_state", "qualname": "RobotMode.CARTTOOL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RobotMode.CARTTOOL: &#x27;carttool&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.RobotMode.PLATFORM", "modulename": "cri_lib.robot_state", "qualname": "RobotMode.PLATFORM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RobotMode.PLATFORM: &#x27;platform&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.RobotMode.FSM", "modulename": "cri_lib.robot_state", "qualname": "RobotMode.FSM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RobotMode.FSM: &#x27;fsm&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState", "kind": "class", "doc": "<p>Enum of possible states of kinematics</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.KinematicsState.NO_ERROR", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.NO_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.NO_ERROR: 0&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.JOINT_MIN", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.JOINT_MIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.JOINT_MIN: 13&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.JOINT_MAX", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.JOINT_MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.JOINT_MAX: 14&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.SIGULARITY_CENTER", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.SIGULARITY_CENTER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.SIGULARITY_CENTER: 21&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.SIGULARITY_REACH", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.SIGULARITY_REACH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.SIGULARITY_REACH: 23&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.SIGULARITY_WRIST", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.SIGULARITY_WRIST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.SIGULARITY_WRIST: 24&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX0", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX0", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX0: 30&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX1", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX1", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX1: 31&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX2", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX2", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX2: 32&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX3", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX3", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX3: 33&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX4", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX4", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX4: 34&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.VIRTUAL_BOX5", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.VIRTUAL_BOX5", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.VIRTUAL_BOX5: 35&gt;"}, {"fullname": "cri_lib.robot_state.KinematicsState.MOTION_NOT_ALLOWED", "modulename": "cri_lib.robot_state", "qualname": "KinematicsState.MOTION_NOT_ALLOWED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KinematicsState.MOTION_NOT_ALLOWED: 99&gt;"}, {"fullname": "cri_lib.robot_state.OperationMode", "modulename": "cri_lib.robot_state", "qualname": "OperationMode", "kind": "class", "doc": "<p>Enum of possible operartion modes</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.OperationMode.NOT_ENABLED", "modulename": "cri_lib.robot_state", "qualname": "OperationMode.NOT_ENABLED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OperationMode.NOT_ENABLED: -1&gt;"}, {"fullname": "cri_lib.robot_state.OperationMode.NORMAL", "modulename": "cri_lib.robot_state", "qualname": "OperationMode.NORMAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OperationMode.NORMAL: 0&gt;"}, {"fullname": "cri_lib.robot_state.OperationMode.MANUAL", "modulename": "cri_lib.robot_state", "qualname": "OperationMode.MANUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OperationMode.MANUAL: 1&gt;"}, {"fullname": "cri_lib.robot_state.OperationMode.MOTION_NOT_ALLOWED", "modulename": "cri_lib.robot_state", "qualname": "OperationMode.MOTION_NOT_ALLOWED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;OperationMode.MOTION_NOT_ALLOWED: 2&gt;"}, {"fullname": "cri_lib.robot_state.RunState", "modulename": "cri_lib.robot_state", "qualname": "RunState", "kind": "class", "doc": "<p>Enum of possible run states</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.RunState.STOPPED", "modulename": "cri_lib.robot_state", "qualname": "RunState.STOPPED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RunState.STOPPED: 0&gt;"}, {"fullname": "cri_lib.robot_state.RunState.PAUSED", "modulename": "cri_lib.robot_state", "qualname": "RunState.PAUSED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RunState.PAUSED: 1&gt;"}, {"fullname": "cri_lib.robot_state.RunState.RUNNING", "modulename": "cri_lib.robot_state", "qualname": "RunState.RUNNING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RunState.RUNNING: 2&gt;"}, {"fullname": "cri_lib.robot_state.ReplayMode", "modulename": "cri_lib.robot_state", "qualname": "ReplayMode", "kind": "class", "doc": "<p>Enum of possible replay modes</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.ReplayMode.SINGLE", "modulename": "cri_lib.robot_state", "qualname": "ReplayMode.SINGLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReplayMode.SINGLE: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReplayMode.REPEAT", "modulename": "cri_lib.robot_state", "qualname": "ReplayMode.REPEAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReplayMode.REPEAT: 1&gt;"}, {"fullname": "cri_lib.robot_state.ReplayMode.STEP", "modulename": "cri_lib.robot_state", "qualname": "ReplayMode.STEP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReplayMode.STEP: 2&gt;"}, {"fullname": "cri_lib.robot_state.ReplayMode.FAST", "modulename": "cri_lib.robot_state", "qualname": "ReplayMode.FAST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReplayMode.FAST: 3&gt;"}, {"fullname": "cri_lib.robot_state.ErrorStates", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates", "kind": "class", "doc": "<p>error states of axes, multiple errors can apply</p>\n"}, {"fullname": "cri_lib.robot_state.ErrorStates.__init__", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">over_temp</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">estop_lowv</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">motor_not_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">com</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">position_lag</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ENC</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">overcurrent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">driver</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.ErrorStates.over_temp", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.over_temp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.estop_lowv", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.estop_lowv", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.motor_not_enabled", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.motor_not_enabled", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.com", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.com", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.position_lag", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.position_lag", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.ENC", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.ENC", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.overcurrent", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.overcurrent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ErrorStates.driver", "modulename": "cri_lib.robot_state", "qualname": "ErrorStates.driver", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition", "kind": "class", "doc": "<p>Represents the cartesian position of a robot</p>\n"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.__init__", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.X", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.X", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.Y", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.Y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.Z", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.Z", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.A", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.A", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.B", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotCartesianPosition.C", "modulename": "cri_lib.robot_state", "qualname": "RobotCartesianPosition.C", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PlatformCartesianPosition", "modulename": "cri_lib.robot_state", "qualname": "PlatformCartesianPosition", "kind": "class", "doc": "<p>Represents the cartesian position of a platform</p>\n"}, {"fullname": "cri_lib.robot_state.PlatformCartesianPosition.__init__", "modulename": "cri_lib.robot_state", "qualname": "PlatformCartesianPosition.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>, </span><span class=\"param\"><span class=\"n\">RZ</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.PlatformCartesianPosition.X", "modulename": "cri_lib.robot_state", "qualname": "PlatformCartesianPosition.X", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PlatformCartesianPosition.Y", "modulename": "cri_lib.robot_state", "qualname": "PlatformCartesianPosition.Y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PlatformCartesianPosition.RZ", "modulename": "cri_lib.robot_state", "qualname": "PlatformCartesianPosition.RZ", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState", "modulename": "cri_lib.robot_state", "qualname": "JointsState", "kind": "class", "doc": "<p>Represents the joints state of a robot</p>\n"}, {"fullname": "cri_lib.robot_state.JointsState.__init__", "modulename": "cri_lib.robot_state", "qualname": "JointsState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">G1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">G2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">G3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">P1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">P2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">P3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">P4</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.JointsState.A1", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.A2", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.A3", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.A4", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.A5", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A5", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.A6", "modulename": "cri_lib.robot_state", "qualname": "JointsState.A6", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.E1", "modulename": "cri_lib.robot_state", "qualname": "JointsState.E1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.E2", "modulename": "cri_lib.robot_state", "qualname": "JointsState.E2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.E3", "modulename": "cri_lib.robot_state", "qualname": "JointsState.E3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.G1", "modulename": "cri_lib.robot_state", "qualname": "JointsState.G1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.G2", "modulename": "cri_lib.robot_state", "qualname": "JointsState.G2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.G3", "modulename": "cri_lib.robot_state", "qualname": "JointsState.G3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.P1", "modulename": "cri_lib.robot_state", "qualname": "JointsState.P1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.P2", "modulename": "cri_lib.robot_state", "qualname": "JointsState.P2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.P3", "modulename": "cri_lib.robot_state", "qualname": "JointsState.P3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.JointsState.P4", "modulename": "cri_lib.robot_state", "qualname": "JointsState.P4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable", "modulename": "cri_lib.robot_state", "qualname": "PosVariable", "kind": "class", "doc": "<p>Represents a position variable</p>\n"}, {"fullname": "cri_lib.robot_state.PosVariable.__init__", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">Z</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">B</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">C</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.PosVariable.X", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.X", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.Y", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.Y", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.Z", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.Z", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.B", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.B", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.C", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.C", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A1", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A2", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A3", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A4", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A5", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A5", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.A6", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.A6", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.E1", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.E1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.E2", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.E2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.PosVariable.E3", "modulename": "cri_lib.robot_state", "qualname": "PosVariable.E3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.OperationInfo", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo", "kind": "class", "doc": "<p>Operation statistics sent by the robot controler</p>\n"}, {"fullname": "cri_lib.robot_state.OperationInfo.__init__", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">program_starts_total</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">up_time_complete</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">up_time_enabled</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">up_time_motion</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">up_time_last</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">last_programm_duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">num_program_starts_since_startup</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.OperationInfo.program_starts_total", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.program_starts_total", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.OperationInfo.up_time_complete", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.up_time_complete", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.OperationInfo.up_time_enabled", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.up_time_enabled", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.OperationInfo.up_time_motion", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.up_time_motion", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.OperationInfo.up_time_last", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.up_time_last", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.OperationInfo.last_programm_duration", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.last_programm_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.OperationInfo.num_program_starts_since_startup", "modulename": "cri_lib.robot_state", "qualname": "OperationInfo.num_program_starts_since_startup", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.ReferencingAxisState", "modulename": "cri_lib.robot_state", "qualname": "ReferencingAxisState", "kind": "class", "doc": "<p>Enum of possible referencing states of an axis</p>\n", "bases": "enum.Enum"}, {"fullname": "cri_lib.robot_state.ReferencingAxisState.NOT_REFERENCED", "modulename": "cri_lib.robot_state", "qualname": "ReferencingAxisState.NOT_REFERENCED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingAxisState.REFERENCED", "modulename": "cri_lib.robot_state", "qualname": "ReferencingAxisState.REFERENCED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReferencingAxisState.REFERENCED: 1&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingAxisState.REFERENCING", "modulename": "cri_lib.robot_state", "qualname": "ReferencingAxisState.REFERENCING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ReferencingAxisState.REFERENCING: 2&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState", "kind": "class", "doc": "<p>Represents the overall referencing state of the robot.</p>\n"}, {"fullname": "cri_lib.robot_state.ReferencingState.__init__", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">global_state</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">mandatory</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ref_prog_enabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ref_prog_running</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">A1</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">A2</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">A3</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">A4</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">A5</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">A6</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E1</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E2</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E3</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E4</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E5</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">E6</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingAxisState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReferencingAxisState</span><span class=\"o\">.</span><span class=\"n\">NOT_REFERENCED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.ReferencingState.global_state", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.global_state", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.mandatory", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.mandatory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "cri_lib.robot_state.ReferencingState.ref_prog_enabled", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.ref_prog_enabled", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ReferencingState.ref_prog_running", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.ref_prog_running", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.ReferencingState.A1", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.A2", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.A3", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.A4", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.A5", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A5", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.A6", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.A6", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E1", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E1", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E2", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E2", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E3", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E3", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E4", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E4", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E5", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E5", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.ReferencingState.E6", "modulename": "cri_lib.robot_state", "qualname": "ReferencingState.E6", "kind": "variable", "doc": "<p></p>\n", "annotation": ": cri_lib.robot_state.ReferencingAxisState", "default_value": "&lt;ReferencingAxisState.NOT_REFERENCED: 0&gt;"}, {"fullname": "cri_lib.robot_state.RobotState", "modulename": "cri_lib.robot_state", "qualname": "RobotState", "kind": "class", "doc": "<p>Dataclass which holds the current state of the robot.</p>\n"}, {"fullname": "cri_lib.robot_state.RobotState.__init__", "modulename": "cri_lib.robot_state", "qualname": "RobotState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RobotMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">RobotMode</span><span class=\"o\">.</span><span class=\"n\">JOINT</span><span class=\"p\">:</span> <span class=\"s1\">&#39;joint&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">joints_set_point</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">JointsState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">joints_current</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">JointsState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">position_robot</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RobotCartesianPosition</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">position_platform</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">PlatformCartesianPosition</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">cart_speed_mm_per_s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">override</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">100.0</span>,</span><span class=\"param\">\t<span class=\"n\">din</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">dout</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">supply_voltage</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">battery_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">current_joints</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">kinematics_state</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">KinematicsState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">KinematicsState</span><span class=\"o\">.</span><span class=\"n\">MOTION_NOT_ALLOWED</span><span class=\"p\">:</span> <span class=\"mi\">99</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">operation_mode</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">OperationMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">OperationMode</span><span class=\"o\">.</span><span class=\"n\">NOT_ENABLED</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">global_signals</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">frame_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">frame_position_current</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RobotCartesianPosition</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">main_main_program</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">main_current_program</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">logic_main_program</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">logic_current_program</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">main_commands_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">logic_commands_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">main_current_command</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">logic_current_command</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">main_runstate</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RunState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">RunState</span><span class=\"o\">.</span><span class=\"n\">STOPPED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">logic_runstate</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">RunState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">RunState</span><span class=\"o\">.</span><span class=\"n\">STOPPED</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">main_replay_mode</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReplayMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReplayMode</span><span class=\"o\">.</span><span class=\"n\">SINGLE</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">logic_replay_mode</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReplayMode</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ReplayMode</span><span class=\"o\">.</span><span class=\"n\">SINGLE</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">error_states</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ErrorStates</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">combined_axes_error</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;_not_ready&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cycle_time</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">workload</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">gripper_state</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\tvariabels: dict[slice(&lt;class &#x27;str&#x27;&gt;, [cri_lib.robot_state.PosVariable | float], None)] = &lt;factory&gt;,</span><span class=\"param\">\t<span class=\"n\">operation_info</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">OperationInfo</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">active_control</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">robot_control_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">robot_configuration</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">robot_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">gripper_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">project_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">referencing_state</span><span class=\"p\">:</span> <span class=\"n\">cri_lib</span><span class=\"o\">.</span><span class=\"n\">robot_state</span><span class=\"o\">.</span><span class=\"n\">ReferencingState</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">board_temps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">motor_temps</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "cri_lib.robot_state.RobotState.mode", "modulename": "cri_lib.robot_state", "qualname": "RobotState.mode", "kind": "variable", "doc": "<p>Robot execution mode</p>\n", "annotation": ": cri_lib.robot_state.RobotMode", "default_value": "&lt;RobotMode.JOINT: &#x27;joint&#x27;&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.joints_set_point", "modulename": "cri_lib.robot_state", "qualname": "RobotState.joints_set_point", "kind": "variable", "doc": "<p>Set point of robot joints</p>\n", "annotation": ": cri_lib.robot_state.JointsState"}, {"fullname": "cri_lib.robot_state.RobotState.joints_current", "modulename": "cri_lib.robot_state", "qualname": "RobotState.joints_current", "kind": "variable", "doc": "<p>Actual values of robot joints</p>\n", "annotation": ": cri_lib.robot_state.JointsState"}, {"fullname": "cri_lib.robot_state.RobotState.position_robot", "modulename": "cri_lib.robot_state", "qualname": "RobotState.position_robot", "kind": "variable", "doc": "<p>Current cartesian position of robot</p>\n", "annotation": ": cri_lib.robot_state.RobotCartesianPosition"}, {"fullname": "cri_lib.robot_state.RobotState.position_platform", "modulename": "cri_lib.robot_state", "qualname": "RobotState.position_platform", "kind": "variable", "doc": "<p>Current cartesian position of platform</p>\n", "annotation": ": cri_lib.robot_state.PlatformCartesianPosition"}, {"fullname": "cri_lib.robot_state.RobotState.cart_speed_mm_per_s", "modulename": "cri_lib.robot_state", "qualname": "RobotState.cart_speed_mm_per_s", "kind": "variable", "doc": "<p>current speed of the cart in mm/s</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.override", "modulename": "cri_lib.robot_state", "qualname": "RobotState.override", "kind": "variable", "doc": "<p>global robot speed override</p>\n", "annotation": ": float", "default_value": "100.0"}, {"fullname": "cri_lib.robot_state.RobotState.din", "modulename": "cri_lib.robot_state", "qualname": "RobotState.din", "kind": "variable", "doc": "<p>digital ins</p>\n", "annotation": ": list[bool]"}, {"fullname": "cri_lib.robot_state.RobotState.dout", "modulename": "cri_lib.robot_state", "qualname": "RobotState.dout", "kind": "variable", "doc": "<p>digital outs</p>\n", "annotation": ": list[bool]"}, {"fullname": "cri_lib.robot_state.RobotState.emergency_stop_ok", "modulename": "cri_lib.robot_state", "qualname": "RobotState.emergency_stop_ok", "kind": "variable", "doc": "<p><code>True</code> if emergency stop circuit is closed</p>\n", "default_value": "False"}, {"fullname": "cri_lib.robot_state.RobotState.main_relay", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_relay", "kind": "variable", "doc": "<p><code>True</code> if main power relay is closed</p>\n", "default_value": "False"}, {"fullname": "cri_lib.robot_state.RobotState.supply_voltage", "modulename": "cri_lib.robot_state", "qualname": "RobotState.supply_voltage", "kind": "variable", "doc": "<p>current supply voltage</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.battery_percent", "modulename": "cri_lib.robot_state", "qualname": "RobotState.battery_percent", "kind": "variable", "doc": "<p>battery percent of mobile platform</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.current_total", "modulename": "cri_lib.robot_state", "qualname": "RobotState.current_total", "kind": "variable", "doc": "<p>total current drawn by robot</p>\n", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.current_joints", "modulename": "cri_lib.robot_state", "qualname": "RobotState.current_joints", "kind": "variable", "doc": "<p>current drawn by individual axes</p>\n", "annotation": ": list[float]"}, {"fullname": "cri_lib.robot_state.RobotState.kinematics_state", "modulename": "cri_lib.robot_state", "qualname": "RobotState.kinematics_state", "kind": "variable", "doc": "<p>global kinematics state</p>\n", "annotation": ": cri_lib.robot_state.KinematicsState", "default_value": "&lt;KinematicsState.MOTION_NOT_ALLOWED: 99&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.operation_mode", "modulename": "cri_lib.robot_state", "qualname": "RobotState.operation_mode", "kind": "variable", "doc": "<p>global operation mode</p>\n", "annotation": ": cri_lib.robot_state.OperationMode", "default_value": "&lt;OperationMode.NOT_ENABLED: -1&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.global_signals", "modulename": "cri_lib.robot_state", "qualname": "RobotState.global_signals", "kind": "variable", "doc": "<p>global signals</p>\n", "annotation": ": list[bool]"}, {"fullname": "cri_lib.robot_state.RobotState.frame_name", "modulename": "cri_lib.robot_state", "qualname": "RobotState.frame_name", "kind": "variable", "doc": "<p>name of currently active frame</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.frame_position_current", "modulename": "cri_lib.robot_state", "qualname": "RobotState.frame_position_current", "kind": "variable", "doc": "<p>position in currently active frame</p>\n", "annotation": ": cri_lib.robot_state.RobotCartesianPosition"}, {"fullname": "cri_lib.robot_state.RobotState.main_main_program", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_main_program", "kind": "variable", "doc": "<p>main program of main interpreter</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.main_current_program", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_current_program", "kind": "variable", "doc": "<p>currently active program of main interpreter, can be different than main_main_program in case of sub programm</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.logic_main_program", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_main_program", "kind": "variable", "doc": "<p>main programm of logic interpreter</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.logic_current_program", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_current_program", "kind": "variable", "doc": "<p>currently active program of logic interpreter, can be different than logic_main_program in case of sub programm</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.main_commands_count", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_commands_count", "kind": "variable", "doc": "<p>total number of commands in main program</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.RobotState.logic_commands_count", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_commands_count", "kind": "variable", "doc": "<p>total number of commands in logic program</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.RobotState.main_current_command", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_current_command", "kind": "variable", "doc": "<p>index of currently executed command in main interpreter</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.RobotState.logic_current_command", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_current_command", "kind": "variable", "doc": "<p>index of currently executed command in logic interpreter</p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "cri_lib.robot_state.RobotState.main_runstate", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_runstate", "kind": "variable", "doc": "<p>runstate of main interpreter</p>\n", "annotation": ": cri_lib.robot_state.RunState", "default_value": "&lt;RunState.STOPPED: 0&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.logic_runstate", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_runstate", "kind": "variable", "doc": "<p>runstate of logic interpreter</p>\n", "annotation": ": cri_lib.robot_state.RunState", "default_value": "&lt;RunState.STOPPED: 0&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.main_replay_mode", "modulename": "cri_lib.robot_state", "qualname": "RobotState.main_replay_mode", "kind": "variable", "doc": "<p>replay mode of main interpreter</p>\n", "annotation": ": cri_lib.robot_state.ReplayMode", "default_value": "&lt;ReplayMode.SINGLE: 0&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.logic_replay_mode", "modulename": "cri_lib.robot_state", "qualname": "RobotState.logic_replay_mode", "kind": "variable", "doc": "<p>replay mode of logic interpreter</p>\n", "annotation": ": cri_lib.robot_state.ReplayMode", "default_value": "&lt;ReplayMode.SINGLE: 0&gt;"}, {"fullname": "cri_lib.robot_state.RobotState.error_states", "modulename": "cri_lib.robot_state", "qualname": "RobotState.error_states", "kind": "variable", "doc": "<p>error states of individual axes</p>\n", "annotation": ": list[cri_lib.robot_state.ErrorStates]"}, {"fullname": "cri_lib.robot_state.RobotState.combined_axes_error", "modulename": "cri_lib.robot_state", "qualname": "RobotState.combined_axes_error", "kind": "variable", "doc": "<p>combined error state of all axes as string</p>\n", "annotation": ": str", "default_value": "&#x27;_not_ready&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.cycle_time", "modulename": "cri_lib.robot_state", "qualname": "RobotState.cycle_time", "kind": "variable", "doc": "<p>cycle time of robot control loop</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.workload", "modulename": "cri_lib.robot_state", "qualname": "RobotState.workload", "kind": "variable", "doc": "<p>workload of robot control cpu</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.gripper_state", "modulename": "cri_lib.robot_state", "qualname": "RobotState.gripper_state", "kind": "variable", "doc": "<p>current opening value of the gripper</p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "cri_lib.robot_state.RobotState.variabels", "modulename": "cri_lib.robot_state", "qualname": "RobotState.variabels", "kind": "variable", "doc": "<p>variables saved in robot controller</p>\n", "annotation": ": dict[slice(&lt;class &#x27;str&#x27;&gt;, [cri_lib.robot_state.PosVariable | float], None)]"}, {"fullname": "cri_lib.robot_state.RobotState.operation_info", "modulename": "cri_lib.robot_state", "qualname": "RobotState.operation_info", "kind": "variable", "doc": "<p>operation statistics of robot controller</p>\n", "annotation": ": cri_lib.robot_state.OperationInfo"}, {"fullname": "cri_lib.robot_state.RobotState.active_control", "modulename": "cri_lib.robot_state", "qualname": "RobotState.active_control", "kind": "variable", "doc": "<p>indicates whether the connection has active control of the robot</p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "cri_lib.robot_state.RobotState.robot_control_version", "modulename": "cri_lib.robot_state", "qualname": "RobotState.robot_control_version", "kind": "variable", "doc": "<p>version of robot control software</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.robot_configuration", "modulename": "cri_lib.robot_state", "qualname": "RobotState.robot_configuration", "kind": "variable", "doc": "<p>configuration of robot</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.robot_type", "modulename": "cri_lib.robot_state", "qualname": "RobotState.robot_type", "kind": "variable", "doc": "<p>type of robot</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.gripper_type", "modulename": "cri_lib.robot_state", "qualname": "RobotState.gripper_type", "kind": "variable", "doc": "<p>type of gripper</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.project_file", "modulename": "cri_lib.robot_state", "qualname": "RobotState.project_file", "kind": "variable", "doc": "<p>currently active project file</p>\n", "annotation": ": str", "default_value": "&#x27;&#x27;"}, {"fullname": "cri_lib.robot_state.RobotState.referencing_state", "modulename": "cri_lib.robot_state", "qualname": "RobotState.referencing_state", "kind": "variable", "doc": "<p>individual referencing state of all axes</p>\n", "annotation": ": cri_lib.robot_state.ReferencingState"}, {"fullname": "cri_lib.robot_state.RobotState.board_temps", "modulename": "cri_lib.robot_state", "qualname": "RobotState.board_temps", "kind": "variable", "doc": "<p>Temperatures of motor controller PCBs</p>\n", "annotation": ": list[float]"}, {"fullname": "cri_lib.robot_state.RobotState.motor_temps", "modulename": "cri_lib.robot_state", "qualname": "RobotState.motor_temps", "kind": "variable", "doc": "<p>Temperatures of motors</p>\n", "annotation": ": list[float]"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();